using System;
using System.Collections.Generic;
using Twitcher;
using System.Linq;
using Twitcher.Controllers;
using Twitcher.Controllers.Attributes;
using Twitcher.Controllers.JsonHelper;
using LiphiBot2.Models;

namespace LiphiBot2.Controllers
{
    [Channel("any")]
    [User("any")]
    public class SafritSubController : Controller
    {
        private readonly JsonHelper _helper;
        public SafritSubController(JsonHelper helper)
        {
            _helper = helper;
        }


        [StartWith("!addsub", IsFullWord = true)]
        [User("liphitc")]
        [User("Safrit22")]
        public void AddSub()
        {
            string[] splited = Message.Message.Split(' ');
            if (splited.Length < 3)
            {
                SendAnswer("weirdChamp");
                return;
            }
            float subCount;
            if (float.TryParse(splited[1], out subCount))
            {
                var subs = _helper.GetObject<List<Sub>>("Subs", "Subs");
                if (subs == null)
                    subs = new List<Sub>();

                var userSub = subs.FirstOrDefault(x => x.UserName == splited[2].ToLower());

                if (userSub == null)
                    userSub = new Sub() { UserName = splited[2].ToLower() };

                userSub.SubCount += subCount;
                subs.Remove(userSub);
                subs.Add(userSub);
                _helper.EditObject<List<Sub>>("Subs", "Subs", subs);
                SendAnswer("–±–∞–ª–∞–Ω—Å _" + splited[2] + " —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω peepoClap  –ï–≥–æ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + userSub.SubCount + " " + GetSubName(subCount) + " pOg");
                return;
            }
            SendAnswer("weirdChamp üëâ {–ö–æ–ª-–≤–æ} {–ö–æ–º—É}");

        }
        
        [StartWith("!removesub", IsFullWord = true)]
        [User("liphitc")]
        [User("Safrit22")]
        public void RemoveSub()
        {
            string[] splited = Message.Message.Split(' ');
            if (splited.Length < 2)
            {
                SendAnswer("weirdChamp");
                return;
            }
            float subCount;
            if (float.TryParse(splited[1], out subCount))
            {
                var subs = _helper.GetObject<List<Sub>>("Subs", "Subs");
                if (subs == null)
                    subs = new List<Sub>();

                var userSub = subs.FirstOrDefault(x => x.UserName == splited[2].ToLower());

                if (userSub == null)
                {
                    SendAnswer("–≠—Ç–æ—Ç —é–∑–µ—Ä –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω –≤ –±–¥ PETTHEPEPEGA");
                    return;
                }

                if (userSub.SubCount < subCount)
                {
                    SendAnswer("–£ —ç—Ç–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å–∞–±–æ–∫ PETTHEPEPEGA");
                    return;
                }
                userSub.SubCount -= subCount;
                subs.Remove(userSub);
                subs.Add(userSub);
                _helper.EditObject<List<Sub>>("Subs", "Subs", subs);
                SendAnswer("c –±–∞–ª–∞–Ω—Å–∞ _" + splited[2] + " —É—Å–ø–µ—à–Ω–æ —Å–Ω—è—Ç–æ " + subCount + " " + GetSubName(subCount) + " WoahSadBlanket –ï–≥–æ —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: " + userSub.SubCount + " —Å–∞–±–æ–∫ Sadge");
                return;
            }
            SendAnswer("weirdChamp üëâ {–ö–æ–ª-–≤–æ} {–ö–æ–º—É}");
        }

        [StartWith("!giftsub", IsFullWord = true)]
        public void GiftSub()
        {
            string[] splited = Message.Message.Split(' ');
            if (splited.Length < 2)
            {
                SendAnswer("weirdChamp");
                return;
            }
            float subCount;
            if (float.TryParse(splited[1], out subCount))
            {
                var subs = _helper.GetObject<List<Sub>>("Subs", "Subs");
                if (subs == null)
                    subs = new List<Sub>();

                var userSub = subs.FirstOrDefault(x => x.UserName == Message.Username);

                if (userSub == null)
                {
                    SendAnswer("–¢—ã –Ω–µ –∑–∞—Ä–µ–≥–∞–Ω –≤ –±–¥ PETTHEPEPEGA");
                    return;
                }

                if (userSub.SubCount < subCount)
                {
                    SendAnswer("–£ —Ç–µ–±—è –Ω–µ—Ç —Å—Ç–æ–ª—å–∫–æ —Å–∞–±–æ–∫ PETTHEPEPEGA");
                    return;
                }
                var userSubTo = subs.FirstOrDefault(x => x.UserName == splited[2].ToLower());
                if (userSubTo == null)
                {
                    userSubTo = new Sub() { UserName = splited[2].ToLower() };
                }
                userSub.SubCount -= subCount;
                userSubTo.SubCount += subCount;
                subs.Remove(userSub);
                subs.Add(userSub);
                subs.Remove(userSubTo);
                subs.Add(userSubTo);
                _helper.EditObject<List<Sub>>("Subs", "Subs", subs);
                SendAnswer("–≤—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∞—Ä–∏–ª–∏ " + subCount + " " + GetSubName(subCount) + " _" + splited[2] + " WoahBlanket");
                return;
            }
            SendAnswer("weirdChamp üëâ {–ö–æ–ª-–≤–æ} {–ö–æ–º—É}");
        }

        [StartWith("!howmuchsubsdoihave")]
        public void HowMuchSubA()
        {
            var subs = _helper.GetObject<List<Sub>>("Subs", "Subs");
            var user = subs.FirstOrDefault(x => x.UserName == Message.Username);
            if (user == null || user.SubCount == 0)
            {
                SendAnswer("0 YEPTA");
                return;
            }
            if (user.SubCount < 1)
            {
                SendAnswer(user.SubCount + " WoahBlanket");
                return;
            }
            SendAnswer(user.SubCount + " pOg");
                return;
        }

        
        [NonCommand]
        private string GetSubName(float count)
        {
            if (count == 1)
                return "—Å–∞–±–∫–∞";

            return "—Å–∞–±–∫–∏";

        }

    }
}
